// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "TreePickers.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class TreePickers
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v18.01.00
// App/Edition: app-test-pickers/
// User:        2sichost
// When:        2024-09-24 13:04:01Z
namespace AppCode.Data
{
  // This is a generated class for TreePickers 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// TreePickers data. <br/>
  /// Generated 2024-09-24 13:04:01Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.EntitySingleCP`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class TreePickers: AutoGenerated.ZAutoGenTreePickers
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.TreePickers in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZAutoGenTreePickers: Custom.Data.CustomItem
  {
    /// <summary>
    /// EntitySingleCP as single item of VehicleChildParent.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type VehicleChildParent was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public VehicleChildParent EntitySingleCP => _entitySingleCP ??= _item.Child<VehicleChildParent>("EntitySingleCP");
    private VehicleChildParent _entitySingleCP;

    /// <summary>
    /// EntitySinglePC as single item of VehicleParentChild.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type VehicleParentChild was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public VehicleParentChild EntitySinglePC => _entitySinglePC ??= _item.Child<VehicleParentChild>("EntitySinglePC");
    private VehicleParentChild _entitySinglePC;

    /// <summary>
    /// QuerySingleCP as single item of VehicleChildParent.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type VehicleChildParent was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public VehicleChildParent QuerySingleCP => _querySingleCP ??= _item.Child<VehicleChildParent>("QuerySingleCP");
    private VehicleChildParent _querySingleCP;

    /// <summary>
    /// QuerySinglePC as single item of VehicleParentChild.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type VehicleParentChild was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public VehicleParentChild QuerySinglePC => _querySinglePC ??= _item.Child<VehicleParentChild>("QuerySinglePC");
    private VehicleParentChild _querySinglePC;
  }
}